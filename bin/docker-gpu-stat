#!/usr/bin/env python3
import argparse
import functools
import itertools
import operator
import shutil
import subprocess
import sys
from collections import defaultdict
from typing import TYPE_CHECKING


if TYPE_CHECKING:
    from collections.abc import Callable
    from typing import (
        Any,
        TypeVar,
    )
    from typing import TypedDict as _TypedDict

    Formatter = Callable[[str], str]
    _T = TypeVar("_T", bound=Any)
else:
    class _TypedDict_Meta(type):  # noqa
        def __new__(cls, name, bases, namespace):
            annotations = namespace.get("__annotations__", {})
            for base in bases:
                annotations.update(getattr(base, "__annotations__", {}))
            return type.__new__(cls, name, (dict,), {"__annotations__": annotations})

    def _TypedDict(name, annotations):  # noqa
        return type.__new__(
            _TypedDict_Meta, name, (dict,), {"__annotations__": annotations}
        )


NvidiaUnitStat = _TypedDict(
    "NvidiaUnitStat",
    {"gpu_uuid": str, "index": str},
)

NvidiaAppStat = _TypedDict(
    "NvidiaAppStat",
    {"gpu_uuid": str, "pid": str, "used_memory": str},
)


class NvidiaStat(NvidiaUnitStat, NvidiaAppStat):
    ...


DockerStat = _TypedDict(
    "DockerStat",
    {"Container": str, "Name": str},
)


def parse_docker_stats() -> list[DockerStat]:
    return parse_command_format(
        ["docker", "stats", "--no-stream", "--format"],
        DockerStat,
        col_arg_fmt="{{{{.{}}}}}".format,
    )


def parse_nvidia_stats() -> list[NvidiaStat]:
    nvidia_gpu_stats = parse_command_format(
        ["nvidia-smi", "--format=csv"],
        NvidiaUnitStat,
        query_arg_fmt="--query-gpu={}".format,
        header=True,
    )
    gpu_uuid_to_nvidia_unit_stat = {stat["gpu_uuid"]: stat for stat in nvidia_gpu_stats}

    nvidia_app_stats = parse_command_format(
        ["nvidia-smi", "--format=csv"],
        NvidiaAppStat,
        query_arg_fmt="--query-compute-apps={}".format,
        header=True,
    )

    return [
        {**nvidia_app_stat, **gpu_uuid_to_nvidia_unit_stat[nvidia_app_stat["gpu_uuid"]]}
        for nvidia_app_stat in nvidia_app_stats
    ]


def parse_command_format(
    args, typ, col_arg_fmt="{}".format, query_arg_fmt="{}".format, header=False
):
    # type: (list[str], type[_T], Formatter, Formatter, bool) -> list[_T]
    command_output = subprocess.check_output(
        [*args, query_arg_fmt(",".join(map(col_arg_fmt, typ.__annotations__)))],
    ).decode()
    return [
        typ(
            dict(
                zip(typ.__annotations__, map(str.strip, line.split(",")), strict=False)
            )
        )
        for line in itertools.islice(command_output.splitlines(), int(header), None)
    ]


def main() -> None:
    for command in ("docker", "nvidia-smi"):
        if shutil.which(command) is None:
            sys.exit(
                f"Cannot determine GPU stat, {command} prerequisite is not " "fulfilled"
            )

    nvidia_stats = parse_nvidia_stats()
    docker_stats = parse_docker_stats()

    docker_cols = tuple(DockerStat.__annotations__)
    nvidia_cols = ("pid", "index", "used_memory")

    rows: list[dict] = []
    for docker_stat in docker_stats:
        container_id = docker_stat["Container"]
        try:
            container_child_pids = subprocess.check_output(
                ["docker", "top", container_id, "-eo", "pid"],
                stderr=subprocess.DEVNULL,
            ).decode().strip().splitlines()
        except Exception:
            sys.stderr.write(f"Cannot examine container {container_id}, skipping ...\n")
            continue

        container_nvidia_stats = tuple(
            item for item in nvidia_stats if item["pid"] in container_child_pids
        )
        if len(container_nvidia_stats) == 0:
            continue

        rows.append({**docker_stat, **dict.fromkeys(nvidia_cols, "")})
        rows.extend(
            {
                **dict.fromkeys(docker_cols, ""),
                **{key: val for key, val in nvidia_stat.items() if key in nvidia_cols},
            }
            for nvidia_stat in sorted(
                container_nvidia_stats, key=operator.itemgetter("pid", "index")
            )
        )

    @functools.lru_cache
    def construct_col_formatter(width):
        # type: (int) -> Formatter
        def formatter(text):
            if len(text) > width:
                text = f"{text[:width]}..."
            return f"{text:>{width + 3}}"

        return formatter

    table_cols = (*docker_cols, *nvidia_cols)
    col_to_formatter = defaultdict(
        lambda: construct_col_formatter(10),
        {
            col: construct_col_formatter(width)
            for col, width in (
                ("pid", 8),
                ("index", 5),
                ("Container", 12),
                ("Name", 25),
                ("used_memory", 12),
            )
        },
    )

    col_delimeter = "\t"
    table = "\n".join(
        [
            col_delimeter.join(col_to_formatter[col](col) for col in table_cols),
            *[
                col_delimeter.join(
                    col_to_formatter[col](row[col]) for col in table_cols
                )
                for row in rows
            ],
        ]
    )
    sys.stdout.write(table)
    sys.stdout.flush()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Show per process GPU usage inside Docker containers"
    )
    _ = parser.parse_args()
    main()
